%%

%class ParserHelper;
%namespace frontend ;

%token	MODULE PROCEDURE FUNCTION BEGIN END TYPE RECORD VAR
		IF ELSEIF THEN ELSE WHILE DO COLON ID SEMI COMMA
		LPAREN RPAREN NOT ASSIGN INTLIT POINTER TO ARRAY OF
		DEREF LSQUARE RSQUARE CONST;

%nonassoc EQ NE LT LE GT GE ;

%left ADD SUB OR ;
%left MUL REALDIV DIV MOD AND;
%left DOT;

%root module;

%%

module :
	MODULE ID SEMI
		decls
		optStmts
	END ID SEMI ~> {handleModule}
;

decls :
	consts
	types
	vars
	procdecls ~> {handleDecls}
;

consts :
|	CONST constlist ~> {handleConsts}
;

constlist :
|	const constlist ~> {handleAppendConst}
;

const :
	ID EQ expr SEMI ~> {handleConst}
;

vars :
|	VAR vardecls ~> {handleVars}
;

vardecls :
|	vardecl vardecls ~> {handleAppendVarDecl}
;

identlist :
	ID identlisttail ~> {handleIdentList}  
;

identlisttail:
|	COMMA ID identlisttail ~> {handleAppendIdent}
; 

vardecl :
	identlist COLON ID SEMI ~> {handleVarDecl}
; 

types :
|	TYPE typedecls ~> {handleTypes}
;

typedecls :
|	typedecl typedecls  ~> {handleAppendTypeDecl}
;

typedecl : ID EQ typedesc SEMI ~> {handleTypeDecl}
;

typedesc :
	RECORD
		fields
	END    ~> {handleRecord}
| 	ARRAY exprlist OF ID ~> {handleArray}
|	POINTER TO ID ~> {handlePointer}
;

fields :
|	field fields ~> {handleAppendField}
;

field :
	identlist COLON ID SEMI ~> {handleField}
;

optStmts :
| 	BEGIN stmts ~> {handleOptStmt}
;

procdecls :
	                   ~> {handleEmptyProcDecls}
|	procdecl procdecls ~> {handleAppendProcDecl}
;

procdecl :
	PROCEDURE ID fparams SEMI
		decls
	BEGIN
		stmts
	END ID SEMI ~> {handleProcedure}
|
	FUNCTION ID fparams COLON ID SEMI
		decls
	BEGIN
		stmts
	END ID SEMI ~> {handleFunction}
;

fparams :
|	LPAREN RPAREN
|	LPAREN fparam fparamlist RPAREN ~> {handleFParams}
;

fparamlist :
|	SEMI fparam fparamlist ~> {handleAppendFParam}
;

fparam :
	VAR identlist COLON ID  ~> {handleVarFParam}
|	identlist COLON ID      ~> {handleFParam}
;

stmts:
| 	stmt SEMI stmts ~> {handleAppendStmt}
;

stmt:
	IF expr THEN
		stmts
	elseifs
	optElse
	END ~> {handleIfStmt}
|	WHILE expr DO
		stmts
	END ~> {handleWhile}
|	expr optassign ~> {handleCallOrAssignStmt}
;

optassign:
|	ASSIGN expr ~> {handleAssignStmt}
;

elseifs:
|	elseif elseifs ~> {handleAppendElseif}
;

elseif:
	ELSEIF expr THEN stmts ~> {handleElseif}
;

optElse:
|	ELSE stmts ~> {handleOptElse}
;

expr:
	expr EQ expr ~> {handleEq}
| 	expr NE expr ~> {handleNe}
| 	expr LT expr ~> {handleLt}
|	expr LE expr ~> {handleLe}
|	expr GT expr ~> {handleGt}
| 	expr GE expr ~> {handleGe}
|	expr ADD expr ~> {handleAdd}
|	expr SUB expr ~> {handleSub}
|	expr MUL expr ~> {handleMul}
|	expr REALDIV expr ~> {handleRealDiv}
|	expr DIV expr ~> {handleDiv}
|	expr MOD expr ~> {handleMod}
|	expr AND expr ~> {handleAnd}
|	expr OR expr ~> {handleOr}
|	NOT expr ~> {handleNot}
|	LPAREN expr RPAREN ~> {handleSubExpr}
|	expr DOT ID ~> {handleFieldExpr}
|	expr aparams ~> {handleCallExpr}
|	expr DEREF ~> {handleDerefExpr}
|	expr LSQUARE exprlist RSQUARE ~> {handleIndexExpr}
|	INTLIT ~> {handleIntExpr}
|	ID ~> {handleIdExpr}
;

aparams:
	LPAREN RPAREN
|	LPAREN exprlist RPAREN ~> {handleAParams}
;

exprlist:
	expr exprlisttail ~> {handleFirstExpr}
;

exprlisttail:
|	COMMA expr exprlisttail ~> {handleAppendExpr} 
;
