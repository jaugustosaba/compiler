%%

%class ParserHelper;
%namespace frontend ;

%token	MODULE PROCEDURE FUNCTION BEGIN END TYPE RECORD VAR
		IF ELSEIF THEN ELSE WHILE DO COLON ID EQ SEMI COMMA
		LPAREN RPAREN ;
%root module;

%%

module :
	MODULE ID SEMI
		decls
		optStmts
	END ID SEMI ~> {handleModule}
;

decls :
	types
	vars
	procdecls ~> {handleDecls}
;

vars :
|	VAR vardecls ~> {handleVars}
;

vardecls :
|	vardecl vardecls ~> {handleAppendVarDecl}
;

identlist :
	ID identlisttail ~> {handleIdentList}  
;

identlisttail:
|	COMMA ID identlisttail ~> {handleAppendIdent}
; 

vardecl :
	identlist COLON ID SEMI ~> {handleVarDecl}
; 

types :
|	TYPE typedecls ~> {handleTypes}
;

typedecls :
|	typedecl typedecls  ~> {handleAppendTypeDecl}
;

typedecl : ID EQ typedesc SEMI ~> {handleTypeDecl}
;

typedesc :
	RECORD
		fields
	END    ~> {handleRecord}
;

fields :
|	field fields ~> {handleAppendField}
;

field :
	identlist COLON ID SEMI ~> {handleField}
;

optStmts :
| 	BEGIN stmts ~> {handleOptStmt}
;

procdecls :
	                   ~> {handleEmptyProcDecls}
|	procdecl procdecls ~> {handleAppendProcDecl}
;

procdecl :
	PROCEDURE ID fparams SEMI
		decls
	BEGIN
		stmts
	END ID SEMI ~> {handleProcedure}
|
	FUNCTION ID fparams COLON ID SEMI
		decls
	BEGIN
		stmts
	END ID SEMI ~> {handleFunction}
;

fparams :
|	LPAREN RPAREN
|	LPAREN fparam fparamlist RPAREN ~> {handleFParams}
;

fparamlist :
|	SEMI fparam fparamlist ~> {handleAppendFParam}
;

fparam :
	VAR identlist COLON ID  ~> {handleVarFParam}
|	identlist COLON ID      ~> {handleFParam}
;

stmts:
| 	stmt SEMI stmts ~> {handleAppendStmt}
;

stmt:
	IF expr THEN
		stmts
	elseifs
	optElse
	END ~> {handleIfStmt}
|	WHILE expr DO
		stmts
	END ~> {handleWhile}
;

elseifs:
|	elseif elseifs ~> {handleAppendElseif}
;

elseif:
	ELSEIF expr THEN stmts ~> {handleElseif}
;

optElse:
|	ELSE stmts ~> {handleOptElse}
;

expr:
;